@use 'sass:color';
@use 'utils';

$background-color: null !default;
$text-color: null !default;
$theme: light !default;
$transition: null !default;
$mobile: 600px;

// TODO: divide into mixins for
// layout, different hover effects / color schemes
@mixin styles($color: $background-color $text-color, $height: 56px, $mobile: $mobile, $transition: $transition, $legacy-fallback: null) {
    $background-color: utils.nth-or($color, 1) !global;
    $text-color: utils.nth-or($color, 2) !global;
    $transition: $transition !global;
    $mobile: $mobile !global;

    // properties
    @if $height {
        --header-height: #{$height};
    }
    @if $background-color {
        --background-color: #{$background-color};
    }
    @if $text-color {
        --text-color: #{$text-color};
    }
    @if $transition {
        --transition: #{$transition};
    }

    position: relative;
    width: 100%;
    text-align: left;
    height: $legacy-fallback and $height;
    height: var(--header-height);
    color: $legacy-fallback and $text-color or inherit;
    color: var(--text-color, inherit);
    background-color: $legacy-fallback and $background-color or inherit;
    background-color: var(--background-color, inherit);

    &, & * {
        box-sizing: border-box;
    }

    &__nav {
        width: 100%;
        height: 100%;
        background-color: inherit;
    }

    &__mobile {
        @include utils.flex-row();
        height: 100%;
    }

    &__logo {
        @include utils.flex-row(center);
        margin-right: auto;
        height: 100%;

        svg, &-img {
            display: block;
            width: auto;
            height: 100%;
        }
    }

    &__mobile-buttons {
        @include utils.flex-row(center);
        margin-left: auto;
        height: 100%;
    }

    &__mobile-button {
        @include utils.flex-row(center);

        & svg {
            height: 1em;
        }
    }

    &__nav--target:target &__mobile-button--open {
        display: none;
    }

    &__nav--target:not(:target) &__mobile-button--close {
        display: none;
    }

    &__links { // data-menu-links
        position: absolute;
        left: 0; top: 100%;
        width: 100%;
        max-height: 0;
        background-color: $legacy-fallback and $background-color or inherit;
        background-color: var(--background-color, inherit);
        overflow: hidden;
        transition-duration: $legacy-fallback and $transition;
        transition-duration: var(--transition); // TODO should change based on js or pure css
        transition-property: max-height;
        transition-timing-function: ease-out;
    }

    &__nav--target:target &__links {
        max-height: 100vw
    }

    &__link-container {
        position: relative;
        background-color: if($background-color, null, inherit);
        height: 100%;
    }

    &__dropdown {
        min-width: 100%;
        background-color: $legacy-fallback and $background-color or inherit;
        background-color: var(--background-color, inherit);
    }

    &__link { // data-menu-link
        display: block;
        height: auto;
        background-color: $legacy-fallback and $background-color or inherit;
        background-color: var(--background-color, inherit);
        white-space: nowrap;
    }

    @media screen and (min-width: utils.plus-one($mobile)) {
        &__nav {
            @include utils.flex-row();
        }

        &__mobile-buttons {
            display: none;
        }

        &__dropdown {
            position: absolute;
            top: 100%;
            left: 0;
        }

        &__link-container:not(:hover) &__dropdown {
            display: none;
        }

        &__links {
            position: static;
            @include utils.flex-row();
            margin-left: auto;
            width: auto;
            height: 100%;
            max-height: none;
            overflow: visible;

            & > * {
                width: auto;
                margin-bottom: 0;
            }
        }

        &__link {
            @include utils.flex-row(center);
            height: 100%;
            cursor: pointer;

            &--sub-link {
                height: $legacy-fallback and $height;
                height: var(--header-height);
            }
        }

    }
}

// TODO make hover classes easier to override one
// probably header__link:hover and header__link--mobile:hover
// or something like that
@mixin bg-shade($hover-color: null, $transition: $transition, $mobile: $mobile) {
    $fallback-color: black;
    @if utils.is-color($background-color) and utils.is-color($text-color) and color.lightness($background-color) < color.lightness($text-color)
    or utils.is-color($background-color) and color.lightness($background-color) < 50%
    or utils.is-color($text-color) and color.lightness($text-color) > 50%
    or $theme == dark {
        $fallback-color: white;
    }
    $mix-color: utils.is-color($text-color) and $text-color or $fallback-color;

    @if not $hover-color {
        $hover-color: rgba($mix-color, 0.16);
        @if utils.is-color($background-color) {
            $hover-color: color.mix($mix-color, $background-color, 16%);
        }
    }

    --hover-color: #{$hover-color};

    & a {
        @if $text-color {
            --text-color: #{$text-color};
        }
        &:link, &:visited, &:hover {
            text-decoration: none;
            color: $text-color or inherit;
            color: var(--text-color, inherit);
            fill: $text-color or inherit;
            fill: var(--text-color, inherit);
        }
    }

    &__links { // data-menu-links
        & > * {
            width: 100%;
            margin-bottom: 2px;
        }
    }

    &__link { // data-menu-link
        --background-color: #{$hover-color};
        --hover-color: #{color.mix($mix-color, $hover-color, 16%)};
        background-color: var(--background-color, inherit);
        transition-property: background-color;
        transition-duration: $transition;
        transition-duration: var(--transition);

        &:hover {
            background-color: $hover-color;
            background-color: var(--hover-color);
        }

        @media screen and (min-width: utils.plus-one($mobile)) {
            --background-color: #{$background-color};
            --hover-color: #{$hover-color};

            &-container:hover &--dropdown {
                background-color: $hover-color;
                background-color: var(--hover-color);
            }
        }
    }
}
